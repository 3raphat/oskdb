// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  log           Log[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  event     LogEvent
  message   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

enum LogEvent {
  LOGIN
  LOGOUT
  CREATE
}

model MemberList {
  memberid       Int     @id
  osk_id         String?
  namet          String
  surnamet       String?
  oskgeneration  String?
  address        String?
  prefix_name    String?
  changwat_tname String?
  picture        String?
  tel            String?
  mobile         String?
  fax            String?
  status_id      Int?
}

model MemberRegistration {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now())
  registration_type  RegistrationType
  registration_state RegistrationState @default(PENDING)

  prefix_name   String?
  name_th       String
  surname_th    String
  name_en       String?
  surname_en    String?
  old_name      String?
  old_surname   String?
  citizen_id    String
  birthdate     DateTime?
  sk_since_year String?
  sk_until_year String?
  generation    String
  osk_id        String
  status        MemberStatus

  address_number String?
  alley          String?
  road           String?
  sub_district   String?
  district       String?
  province       String?
  postalcode     String?
  mobile         String?
  tel            String?
  email          String?
  line_id        String?

  workplace           String?
  work_address_number String?
  building            String?
  work_alley          String?
  work_road           String?
  work_sub_district   String?
  work_district       String?
  work_province       String?
  work_postalcode     String?
  work_tel            String?
  work_fax            String?
}

enum RegistrationType {
  LIFETIME
  HONORARY
}

enum RegistrationState {
  PENDING
  APPROVED
  REJECTED
}

enum MemberStatus {
  ALIVE
  DECEASED
  LOST
}
